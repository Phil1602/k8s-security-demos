# See also https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    # Not setting this will result in blocking pods that have this profile set explicitly
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'

    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames:  'runtime/default'
spec:
  allowedHostPaths: []
  hostIPC: false
  hostNetwork: false
  hostPID: false
  hostPorts: []

  requiredDropCapabilities:
    - ALL
  allowedCapabilities: []

  privileged: false
  defaultAllowPrivilegeEscalation: false
  allowPrivilegeEscalation: false
  # Allow core volume types. But more specifically, don't allow mounting host volumes to include the Docker socket - '/var/run/docker.sock'
  # https://kurtmadel.com/posts/native-kubernetes-continuous-delivery/building-container-images-with-kubernetes/
  # Without the "volumes" block configmaps, secrets, etc. are not allowed to be used
  volumes:
    - configMap
    - emptyDir
    - projected
    - secret
    - downwardAPI
    - persistentVolumeClaim
  runAsUser:
    rule: 'MustRunAs'
    ranges:
      - min: 100000
        max: 999999
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 100000
        max: 999999 
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 100000
        max: 999999
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 100000
        max: 999999
  readOnlyRootFilesystem: true

  # Default that must be set
  seLinux:
    rule: RunAsAny
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podsecuritypolicy:restricted
rules:
  - apiGroups:
      - extensions
    resourceNames:
      - restricted
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# Allows all serviceAccounts to use this restricted PSP. 
# If a pod should need more privileges, this could be granted via a PSP, SA, Role and RoleBinding within its namespace.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: podsecuritypolicy:all-serviceaccounts
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: podsecuritypolicy:restricted
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts